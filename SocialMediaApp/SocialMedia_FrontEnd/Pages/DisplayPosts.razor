@page "/posts"


@inject IPostInterface postInterface
@inject ICommentInterface commentInterface
@inject IJSRuntime JSRuntime



@if (posts == null)
{
    <p>Loading posts...
        <div class="spinner-border spinner-border-sm"></div>
        <div class="spinner-grow spinner-grow-sm"></div>
    </p>
}
else if (posts.Any())
{
    @foreach (var post in posts)
    {
        <div class="post">
            <h4>@post.Title</h4>
            <hr>
            <p>@post.Body</p>
            <p>@post.DateCreated</p>
            <p>@post.Tag</p>
            <div>
                
                <button @onclick="() => LikePost(post.PostId)">Like</button>
                <span>@post.Likes Likes</span>
                <button @onclick="() => UnLikePost(post.PostId)">Unlike</button>
                <span>@post.UnLike UnLikes</span>
            </div>
            
        </div>
    }
}
else
{
    <p>No posts found.</p>

}
<!-- Delete Post Confirmation Modal -->
<div class="modal fade" id="DeletePost" tabindex="-1" role="dialog" aria-labelledby="deletePostModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deletePostModalLabel">Confirm Delete</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this post?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
               <button @onclick="() => DeletePost(postToDeleteId)" class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>
</div>
<!-- Fetch Posts by Tag Modal -->
<div class="modal fade" id="FetchPostsByTag" tabindex="-1" role="dialog" aria-labelledby="fetchPostsByHashtagModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="fetchPostsByHashtagModalLabel">Fetch Posts by Hashtag</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
           @* <div class="modal-body">
                <div class="form-group">
                    <label for="hashtag">Tag</label>
                  <input type="text" class="form-control" id="hashtag" @bind="(FetchPostsByTag(TagToSearch))"/>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button @onclick="() => FetchPostsByTag(TagToSearch)" class="btn btn-primary">Fetch Posts</button>
            </div>*@
        </div>
    </div>
</div>

@code {

    private List<Post> posts;
    private Guid postToDeleteId;
    private string newCommentContent = string.Empty;
    private string TagToSearch = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        posts = await postInterface.GetPostsAsync(); 
    }

    
    
        
    
    private async Task LikePost(Guid id)
    {
        // Call ApiService to like the post
         var res =await postInterface.LikePostAsync(id);
         //Refresh the posts to update like counts
        var postToUpdate = posts.FirstOrDefault(p => p.PostId ==id);
        if (postToUpdate != null)
        {
            postToUpdate.Likes++;
        }
        await RefreshPosts();
    }

    private async Task UnLikePost(Guid id)
    {
        //// Call ApiService to dislike the post
        var res =await postInterface.UnLikePostAsync(id);
        

        //// Update the local post count
        var postToUpdate = posts.FirstOrDefault(p => p.PostId == id);
         if (postToUpdate != null)
            {
            postToUpdate.UnLike++;
            }

        await RefreshPosts();
    }

    private async Task RefreshPosts()
    {
        // Refresh the posts after liking/disliking
        posts = await postInterface.GetPostsAsync();
        StateHasChanged(); // Trigger UI update
    }
    private async Task FetchPostsByTag(string Tag)
    {

         //posts= await postInterface.GetPostByTagAsync(TagToSearch);
        // Close the modal
        await JSRuntime.InvokeVoidAsync("$('#fetchPostsByHashtagModal').modal", "hide");
    }
    private async  Task DeletePost(Guid id)
    {
         var res= await postInterface.DeletePostAsync(id);
        posts = await postInterface.GetPostsAsync();

    }

}
